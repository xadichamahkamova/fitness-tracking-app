// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash, email, profile)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, password_hash, profile
`

type CreateUserParams struct {
	Username     sql.NullString
	PasswordHash sql.NullString
	Email        sql.NullString
	Profile      pqtype.NullRawMessage
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Profile,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Profile,
	)
	return i, err
}

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (user_id, name, description)
VALUES($1, $2, $3)
RETURNING id, user_id, name, description, date, created_at, updated_at
`

type CreateWorkoutParams struct {
	UserID      int32
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout, arg.UserID, arg.Name, arg.Description)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, profile FROM users 
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Profile,
	)
	return i, err
}

const getWorkoutByID = `-- name: GetWorkoutByID :one
SELECT id, user_id, name, description, date, created_at, updated_at
FROM workouts
WHERE id = $1
`

func (q *Queries) GetWorkoutByID(ctx context.Context, id int32) (Workout, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutByID, id)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkoutByUserID = `-- name: GetWorkoutByUserID :many
SELECT id, user_id, name, description, date, created_at, updated_at
FROM workouts
WHERE user_id = $1
`

func (q *Queries) GetWorkoutByUserID(ctx context.Context, userID int32) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, profile
FROM users 
ORDER BY username
`

type ListUsersRow struct {
	ID       int32
	Username sql.NullString
	Email    sql.NullString
	Profile  pqtype.NullRawMessage
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Profile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const savePasswordResetToken = `-- name: SavePasswordResetToken :exec
INSERT INTO password_reset (user_email, user_token)
VALUES($1, $2)
`

type SavePasswordResetTokenParams struct {
	UserEmail string
	UserToken string
}

func (q *Queries) SavePasswordResetToken(ctx context.Context, arg SavePasswordResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, savePasswordResetToken, arg.UserEmail, arg.UserToken)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
    set 
        username = $2,
        email = $3,
        profile = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int32
	Username sql.NullString
	Email    sql.NullString
	Profile  pqtype.NullRawMessage
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Profile,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users 
    set 
        password_hash = $2
WHERE email = $1
`

type UpdateUserPasswordParams struct {
	Email        sql.NullString
	PasswordHash sql.NullString
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Email, arg.PasswordHash)
	return err
}
